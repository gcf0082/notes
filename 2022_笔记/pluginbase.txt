pluginbase是加载指定目录下的py文件，即插件只能以文件的形式存在，要想让pluginbase支持加载插件以目录的形式
可以修改：

    def load_plugin(self, name):
        """This automatically loads a plugin by the given name from the
        current source and returns the module.  This is a convenient
        alternative to the import statement and saves you from invoking
        ``__import__`` or a similar function yourself.

        :param name: the name of the plugin to load.
        """
        if '.' in name:
            raise ImportError('Plugin names cannot contain dots.')
        with self:
            return __import__(self.base.package + '.' + name,  #这里指定成目录如 '.xxxx.'
                              globals(), {}, ['__name__'])

对应的
    def list_plugins(self):
        """Returns a sorted list of all plugins that are available in this
        plugin source.  This can be useful to automatically discover plugins
        that are available and is usually used together with
        :meth:`load_plugin`.
        """
        rv = []
        for _, modname, ispkg in pkgutil.iter_modules(self.mod.__path__):  ##这里也需要配合修改
            rv.append(modname)
        return sorted(rv)
	

其他地方可能也需要修改，未完全确认