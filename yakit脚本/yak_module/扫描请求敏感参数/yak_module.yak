yakit.AutoInitYakit()
target = cli.String("target")

for flow = range db.QueryHTTPFlowsAll() {    
    if target !="" && ! str.Contains(flow.Url, target) {
        continue
    }
    requestRaw, err = codec.StrconvUnquote(flow.Request)
    freq, err := fuzz.HTTPRequest(requestRaw, fuzz.https(flow.IsHTTPS))
    if err != nil {
        yakit_output("执行失败")
        continue
    }    
    for _, param := range freq.GetCommonParams() { 
        paramName = param.Name()
        paramValue = param.Value()
        if str.MatchAnyOfRegexp(paramName, `(?i)file`, `(?i)url`, `(?i)uri`, `(?i)path`, `(?i)command`, `(?i)cmd`) {
            yakit.Info(param.Name())
            risk.NewRisk(
                flow.Url,
                risk.type("paramname"), risk.typeVerbose("高危参数名"), risk.severity("info"),
                risk.title(sprintf("%v=%v   -- %v %v", paramName, paramValue, flow.Method, flow.Url)),
                risk.details({
                    "request": flow.Request,
                    "response": flow.response,
                }),
            )            
        }

      if str.MatchAnyOfRegexp(paramValue, `(?i)http`, `(?)ftp`, `/opt`) {
            yakit.Info(paramValue)
            risk.NewRisk(
                flow.Url,
                risk.type("paramvalue"), risk.typeVerbose("高危参数值"), risk.severity("info"),
                risk.title(sprintf("%v=%v   -- %v %v", paramName, paramValue, flow.Method, flow.Url)),
                risk.details({
                    "request": flow.Request,
                    "response": flow.response,
                }),
            )            
        }   
        
    }
    
}

